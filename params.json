{"name":"Signalj","tagline":"A port of SignalR ideas to PlayFramework and Akka","body":"SignalJ\r\n=======\r\n\r\nOverview\r\n--------\r\n\r\nA port of [SignalR](http://asp.net/signalr) to the PlayFramework using Actors.\r\n\r\nExamples\r\n--------\r\n\r\nJump right to some examples:\r\n\r\n* [Test page of various SignalJ functions](http://localhost:9000/test)\r\n* [A port of the Playframework websocket-chat sample app](http://localhost:9000/chat)\r\n\r\nSetup Instructions\r\n------------------\r\n\r\nAdd the following to your build.sbt:\r\n\r\n```\r\nresolvers += \"release repository\" at \"http://chanan.github.io/maven-repo/releases/\"\r\n\r\nresolvers += \"snapshot repository\" at \"http://chanan.github.io/maven-repo/snapshots/\"\r\n```\r\n\r\nAdd to your libraryDependencies:\r\n\r\n```\r\n\"signalJ\" %% \"signalj\" % \"0.4.0\"\r\n```\r\n\r\nInstructions\r\n------------\r\n\r\n*Note:* This is a work in progress! These are not the full instructions\r\n\r\n### Interface\r\n\r\nCreate an interface for the javascript functions in your page (all functions should return void). The method params can be complex types.\r\n\r\nFor example see: ChatPage.java or FirstTestPage.java in the hubs package.\r\n\r\n### Hubs\r\n\r\nCreate a hub class that extends `Hub<TInterface>` where TInterface is the interface created above. You must also override\r\n`getInterface()` and return the interface class.\r\n\r\n### Javascript\r\n\r\nOn your javascript page you must first make a connection to the hub. For example: `test.scala.html`:\r\n\r\n```\r\nvar hub = $.connection.helloWorld;\r\n```\r\n\r\nYou can use `hub.client` to setup the callback that the server will use into your page:\r\n\r\n```\r\nhub.client.firstTestFunctionWithParam = function(param) {\r\n    console.log(\"Called from server with param: \" + param);\r\n};\r\n```\r\n\r\nYou may then start the hub, which will start the websocket connection. This will return a promise which can be used to setup server calls:\r\n\r\n```\r\n$.connection.hub.start().done(function () {\r\n    $('#btnHello').click(function() {\r\n        hub.server.sayHello();\r\n    });\r\n    ...\r\n});\r\n```\r\n\r\nAlso, as seen in the example above, `hub.server` is used to call into the hub serverside methods.\r\n\r\nServer side method may also return a value which is return in a promise like so:\r\n\r\n```\r\n$('#btnAdd').click(function() {\r\n    hub.server.add(1, 2).done(function(result) {\r\n        $('#result').html(result);\r\n    });\r\n});\r\n```\r\n\r\nCalling back to the page\r\n------------------------\r\n    \r\nThe methods of the interface you defined become methods you can call from the hub. For example, if you defined a method in your interface\r\n    called \"myMethod()\":\r\n\r\n* `clients().all.myMethod()` - executes `myMethod` on all clients\r\n* `clients().others.myMethod()` - executes `myMethod` on all clients other than the caller\r\n* `clients().caller.myMethod()` - executes `myMethod` on the caller\r\n* `clients().client(conenctionId).myMethod()` - executes `myMethod` on a specific client\r\n* `clients().allExcept.myMethod()` - executes `myMethod` on a all clients excepts the specified list of clients\r\n    \r\nHub classes are instantiated on every call. Therefore, they are thread safe. Hubs can't store data unless it is in a static variable.\r\nIn that case you need to ensure thread safety of the data. A future version of SignalJ may allow Actors to be hubs.\r\n\r\n### Groups\r\n\r\n#### Group management\r\n\r\nGroups can be used to group user together. Groups get created when the first user joins and get deleted when the last user leaves.\r\n\r\nGroups can be managed server side from within the hub:\r\n\r\n* `groups().add(getConnectionId(), group)` - Adds a connection to a group\r\n* `groups().remove(getConnectionId(), group)` - Removes a connection to a group\r\n    \r\n(*NOTE:* the following is disabled for now in order to match up with SignalR) Group membership can also be accessed from javascript (*Note:* the javascript syntax *will* change\r\nin future versions prior to 1.0 release.):\r\n\r\n* `groupAdd(group)` - Adds the current caller to a group\r\n* `groupRemove(group)` - Removes the current caller to a group\r\n    \r\n### Group communication\r\n\r\nYou can invoke javascript functions to pages in a group with the following commands (as before calling `myMethod()`):\r\n\r\n* `clients().group(group).myMethod()` - Invokes `myMethod` on clients that are part of the group\r\n* `clients().group(group, getConnectionId()).myMethod()` - Invokes `myMethod` on clients that are part of the group except the listed connections\r\n* `clients().inGroupExcept(group, getConnectionId()).myMethod()` - Alias for above syntax\r\n* `clients().othersInGroup(group).myMethod()` - Invokes `myMethod` on clients that are part of the group other than the caller\r\n    \r\nExamples\r\n--------\r\n\r\nExamples of how hubs and page can talk to each other using group and client communication can be found in the hubs.Helloworld which\r\ncan be accessed at: [http://localhost:9000/test](http://localhost:9000/test) and hubs.Chat which can be accessed at\r\n[http://localhost:9000/Chat](http://localhost:9000/Chat) (Which is a rewrite of the playframework websocket-chat example.</p>\r\n\r\nAccessing the hub methods from outside the hub\r\n----------------------------------------------\r\n\r\nYou can access the hub from outside the hub by calling `getHub` on the `GlobalHost`. You can see this for example,\r\nin the `actors.Robot` which is used in the Chat example:\r\n\r\n`HubContext<ChatPage> hub = GlobalHost.getHub(Chat.class);`\r\n\r\nDependency Injection\r\n--------------------\r\n\r\nYou may use dependency injection for your hub classes. To do so, implement `DependencyResolver` (for example:\r\n        hubs.GuiceDependencyResolver). In your app's `Global.onStart` set the resolver in the GlobalHost:\r\n\r\n```java\r\nGuiceDependencyResolver resolver = new GuiceDependencyResolver(injector);\r\nGlobalHost.setDependencyResolver(resolver);\r\n```\r\n\r\nFuture changes\r\n--------------\r\n    \r\n* Add supervision\r\n* groups at the hub level\r\n* better exceptions\r\n* SSE\r\n* Long polling\r\n* Forever Frames\r\n* Clustering","google":"UA-56303263-1","note":"Don't delete this file! It's used internally to help with page regeneration."}